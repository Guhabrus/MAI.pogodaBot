
import telebot
from tensorflow.keras.models import load_model
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
#-------Links------------
tokenMy='1864083594:AAGJBJtU63_ZRHP6nVH3uLPNlEgjoof8DZU'
bot = telebot.TeleBot(tokenMy)

#--------------------------global
#global pesonal_info
personal_info={}
file_path=r'C:\Users\kleychenko\Documents\bot_mat_mod\file\tmp'
#---------------------------------phareses
end_phrase='–Ø —Ä–∞–¥ –í–∞–º –ø–æ–º–æ—á—å üòÄ'
enter_phrase='–ü—Ä–∏–≤–µ—Ç!üôÉ  \n –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ü–æ–º–æ–≥—É –ø—Ä–¥–µ—Å–∫–∞–∑—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É!\n –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É üëá '
help_phrase='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ üëá \n /start\n –ü—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ üëá \n /menu'
#input_cor_phrase='–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–≥–æ—Ç—ã –∏ —à–∏—Ä–æ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'
input_data_phrase='–ó–∞–≥—Ä—É–∑–∏—Ç–µ csv —Ñ–∞–π–ª —Å –í–∞—à–∏–º–∏ –º–µ—Ç–æ–¥–∞–Ω–Ω—ã–º–∏‚úàÔ∏è'
do_phrase='–í–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—Éüëá'
wait_predict_phrase='–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è‚åõ'
menu_phrase='–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é'
#----------------------------------ploting

#----------------------------------model
#model = create_model()
model = load_model('model.h5')
#----------------------------------butoms
@bot.message_handler(commands=['–ü–æ–º–æ—â—å'])
def handle_start(message):
    bot.send_message(message.chat.id, help_phrase)


@bot.message_handler(commands=['start'])
def handle_start(message):
    markup =telebot.types.ReplyKeyboardMarkup(True)
    markup.row('/–ú–µ–Ω—é')
    global personal_info
    if message.chat.id  not in personal_info:
        personal_info[message.chat.id]={'cordinates':None,'tel':None, 'file':None,'priority':None}
    markup.row('/–ü–æ–º–æ—â—å –æ  —Ä–∞–±–æ—Ç–µ')
    bot.send_message(message.chat.id,enter_phrase,reply_markup=markup)

@bot.message_handler(commands=['–ú–µ–Ω—é','menu'])
def handle_start(message):
    markup =telebot.types.ReplyKeyboardMarkup(True)
    print('hello start')
    markup.row('/–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ãüåé')
    markup.row('/–£–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –°—Ç–∞–≤—Ä–æ–ø–æ–ª—èüìà')
    markup.row('/–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ csvüìé')
    markup.row('/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏‚û°Ô∏è')
    markup.row('/–û—Å—Ç–∞–ª–∏—Å—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã‚ùì')
    markup.row('/start')
    bot.send_message(message.chat.id,do_phrase,reply_markup=markup)


@bot.message_handler(commands=['–û—Å—Ç–∞–ª–∏—Å—å'])
def handle_start(message):
    markup =telebot.types.ReplyKeyboardMarkup(True, True)
    phone= telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ωüìû", request_contact=True)
    markup.add(phone)
    bot.send_message(message.chat.id,'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' , reply_markup=markup)



@bot.message_handler(content_types=['contact']) #–û–±—ä—è–≤–∏–ª–∏ –≤–µ—Ç–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :) 
def contact(message):
    if message.contact is not None:
        global personal_info
        personal_info[message.chat.id]['tel']=message.contact.phone_number
        markup =telebot.types.ReplyKeyboardMarkup(True, True)
        markup.row('/–ú–µ–Ω—é')
        msg=bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –í–∞–º —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Çüì†',reply_markup=markup)


@bot.message_handler(commands=['–í–≤–µ–¥–∏—Ç–µ'])
def handle_start(message):
    markup = telebot.types.ReplyKeyboardRemove()
    msg=bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåé —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è',reply_markup=markup)
    
@bot.message_handler(commands=['–£–≤–∏–¥–µ—Ç—å'])
def handle_start(message):
    markup =telebot.types.ReplyKeyboardMarkup(True)
    #markup.row('/–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å 1 –¥–µ–Ω—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π')
    markup.row('/–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å 3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
    markup.row('/–ú–µ–Ω—é')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π',reply_markup=markup)



@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        global personal_info
        personal_info[message.chat.id]['cordinates']=[message.location.latitude,message.location.longitude]
        print(personal_info)
        personal_info[message.chat.id]['priority']='/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
        markup =telebot.types.ReplyKeyboardMarkup(True)
        markup.row('/1 –¥–µ–Ω—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup.row('/3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup.row('/–ú–µ–Ω—é')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚è≤Ô∏è',reply_markup=markup)
    else:
        markup =telebot.types.ReplyKeyboardMarkup(True)
        markup.row('/–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–Ω–æ–≤–æ')
        markup.row('/–ú–µ–Ω—é')



@bot.message_handler(commands=['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'])
def handle_start(message):
    global personal_info
    if personal_info[message.chat.id]['cordinates']==None and personal_info[message.chat.id]['file']==None:
        markup1 =telebot.types.ReplyKeyboardMarkup(True)
        markup1.row('/–ú–µ–Ω—é')
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µüò•',reply_markup=markup1)
    elif (personal_info[message.chat.id]['cordinates']==None  or  personal_info[message.chat.id]['file']==None) :
        if personal_info[message.chat.id]['cordinates']==None:
           personal_info[message.chat.id]['priority']='/csv —Ñ–∞–π–ª'
        else:
            personal_info[message.chat.id]['priority']='/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
        print(personal_info)
        markup2 =telebot.types.ReplyKeyboardMarkup(True)
        markup2.row('/1 –¥–µ–Ω—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup2.row('/3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup2.row('/–ú–µ–Ω—é')
        bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π' ,reply_markup=markup2)
    else:
        markup3 =telebot.types.ReplyKeyboardMarkup(True)
        markup3.row('/csv —Ñ–∞–π–ª')
        markup3.row('/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
        bot.send_message(message.chat.id,'–í–´–±–∏—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è' ,reply_markup=markup3)
    

@bot.message_handler(commands=['csv','–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'])
def handle_start(message):
        personal_info[message.chat.id]['priority']=message.text
        markup =telebot.types.ReplyKeyboardMarkup(True)
        markup.row('/1 –¥–µ–Ω—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup.row('/3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
        markup.row('/–ú–µ–Ω—é')
        msg=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π' ,reply_markup=markup)




@bot.message_handler(commands=['–ó–∞–≥—Ä—É–∑–∏—Ç—å'])
def handle_start(message):
    markup = telebot.types.ReplyKeyboardRemove()
    msg=bot.send_message(message.chat.id, input_data_phrase,reply_markup=markup)
    bot.register_next_step_handler(msg, input_data)


def input_data(message):
    try:
        doc_id=message.document.file_id
        global personal_info
        file_info = bot.get_file(doc_id)
        print(message.document.mime_type)
        if message.document.mime_type=='text/comma-separated-values':
            personal_info[message.chat.id]['file']=str(file_info.file_id)
            src=file_path[:-3]+str(file_info.file_id)+'.csv'
            personal_info[message.chat.id]['priority']='/csv —Ñ–∞–π–ª'
            print(src)
            downloaded_file = bot.download_file(file_info.file_path)
            with open( src, 'wb') as new_file:new_file.write(downloaded_file)
            markup =telebot.types.ReplyKeyboardMarkup(True)
            markup.row('/1 –¥–µ–Ω—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
            markup.row('/3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è')
            markup.row('/–ú–µ–Ω—é')
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π',reply_markup=markup)
            
        else:
            markup =telebot.types.ReplyKeyboardMarkup(True)
            markup.row('/–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æüìé')
            markup.row('/–ú–µ–Ω—é')
            bot.send_message(message.chat.id, '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–µ csv —Ñ–∞–π–ªüò•',reply_markup=markup)
    except:
            markup =telebot.types.ReplyKeyboardMarkup(True)
            markup.row('/–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æüìé')
            markup.row('/–ú–µ–Ω—é')
            bot.send_message(message.chat.id, '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–µ csv —Ñ–∞–π–ªüò•',reply_markup=markup)

@bot.message_handler(commands=['1','3'])
def handle_start(message):
    bot.send_message(message.chat.id, '–ñ–¥–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚åõ')
    predict_model(message=message)


@bot.message_handler(commands=['–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å'])
def handle_start(message):
    bot.send_message(message.chat.id, '–ñ–¥–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚åõ')
    predict_model(message=message)



def predict_model(message):
    print(message.text)
    if  message.text=='/–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å 3 –¥–Ω—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π‚û°Ô∏è' :
        print('here')
        global personal_info
        
       # n_window=30
        src=file_path[:-3]+'graph.jpg'
        src1=file_path[:-3]+'Data.csv'
        print(src)
        print(src1)

        markup =telebot.types.ReplyKeyboardMarkup(True)
        markup.row('/–ú–µ–Ω—é')
        img = open(src, 'rb')
        bot.send_photo(message.chat.id, img,reply_markup=markup)
        img.close()
        doc=img = open(src1, 'rb')
        bot.send_document(message.chat.id, doc,reply_markup=markup)
        doc.close()

        # df = pd.read_csv(r'C:\Users\kleychenko\Documents\bot_mat_mod\file\Data-01.01.2021-29.05.2021.csv')
        # df['Time'] = pd.to_datetime(df.Time)
        # df.index = df['Time']
        # df['Direction'] = df.pop('Direction')*np.pi / 180
        # data = df.sort_index(ascending=True, axis=0)
        # new_data = pd.DataFrame(index=range(0,len(df)),columns=['Time', 'Ff'])
        # for i in range(0,len(data)):
        #     new_data['Time'][i] = data['Time'][i]
        #     new_data['Ff'][i] = data['Ff'][i]
        
        # new_data.index = new_data.Time
        # new_data.drop('Time', axis=1, inplace=True)
        # dataset = new_data.values
        # scaler=MinMaxScaler(feature_range=(0, 1))
        # scaled_data = scaler.fit_transform(dataset)
        # df_to_predict=scaled_data[:n_window]
        # print(df_to_predict.shape)
        # # print('array.np')
        # # print(np.array(df_to_predict))
        # x_test=[]
        # for z in range(n_window,dataset.shape[0]):
        #     x_test.append(dataset[z-n_window:z,0])

        # x_test=np.array(x_test)
        # x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1]))
        
        # for i in range(0,3):
        #     prediction=model.predict(x_test)
        #     tmp_pred=tmp_pred[0][:-1]
        #     tmp_pred=np.i
        # y_pred = scaler.inverse_transform(prediction)
        # print(y_pred)
    else:
        markup =telebot.types.ReplyKeyboardMarkup(True)
        markup.row('/–ú–µ–Ω—é')
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏–µ—Ç–µ, –í—ã –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Çüò•.\n –í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ',reply_markup=markup)



bot.polling()
